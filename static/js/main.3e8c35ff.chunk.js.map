{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["plotData","data","id","width","height","path","svg","select","append","attr","console","log","x","scaleLinear","range","domain","extent","d","x1","y","y1","valueline","line","selectAll","offset","color","enter","datum","style","node","getTotalLength","transition","duration","App","useEffect","a","fetch","result","text","csvParse","setup","className","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uTAWA,SAASA,EAASC,EAAMC,EAAIC,EAAOC,GACjC,IAOIC,EAPAC,EAAMC,YAAOL,GACdM,OAAO,OACPC,KAAK,QAASN,GACdM,KAAK,SAAUL,GACfK,KAAK,KAAM,iBACXA,KAAK,QAAS,8BACjBC,QAAQC,IAAI,OAAQT,EAAIC,EAAOC,GAG/B,IAAIQ,EAAIC,cACLC,MAAM,CAAC,EAAGX,IACVY,OAAOC,YAAOf,GAAM,SAAAgB,GAAC,OAAIA,EAAEC,OAE9BR,QAAQC,IAAIK,YAAOf,GAAOA,GAC1B,IAAIkB,EAAIN,cACLC,MAAM,CAACV,EAAS,IAAK,MACrBW,OAAOC,YAAOf,GAAM,SAAAgB,GAAC,OAAIA,EAAEG,OAE1BC,EAAYC,cACbH,GAAE,SAAAF,GAAC,OAAIE,EAAEF,EAAEG,OACXR,GAAE,SAAAK,GAAC,OAAIL,EAAEK,EAAEC,OAEdZ,EACGE,OAAO,kBACPC,KAAK,KAAM,wBACXA,KAAK,gBAAiB,kBACtBA,KAAK,KAAM,GACXA,KAAK,KAAMU,EAAE,MACbV,KAAK,KAAM,GACXA,KAAK,KAAMU,EAAE,MACbI,UAAU,QACVtB,KAAK,CACJ,CAAEuB,OAAQ,KAAMC,MAAO,OACvB,CAAED,OAAQ,MAAOC,MAAO,UACxB,CAAED,OAAQ,MAAOC,MAAO,UACxB,CAAED,OAAQ,MAAOC,MAAO,SACxB,CAAED,OAAQ,MAAOC,MAAO,QACxB,CAAED,OAAQ,OAAQC,MAAO,YAE1BC,QACAlB,OAAO,QACPC,KAAK,UAAU,SAAAQ,GAAC,OAAIA,EAAEO,UACtBf,KAAK,cAAc,SAAAQ,GAAC,OAAIA,EAAEQ,SAC7BpB,EAAOC,EACJE,OAAO,QACPmB,MAAM1B,GACN2B,MAAM,eAAgB,GACtBA,MAAM,iBAAkB,QACxBA,MAAM,kBAAmB,SACzBnB,KAAK,QAAS,QACdA,KAAK,IAAKY,GACbX,QAAQC,IAAIN,GAEZA,EACGI,KACC,mBAFJ,UAGOJ,EAAKwB,OAAOC,iBAHnB,YAGuCzB,EAAKwB,OAAOC,mBAEhDrB,KAAK,oBAAqBJ,EAAKwB,OAAOC,kBACtCC,aACAC,SAAS,KACTvB,KAAK,oBAAqB,GA6BhBwB,MA1Bf,WAeE,OAdAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACuBC,MAAM,YAD7B,cACQC,EADR,gBAEqBA,EAAOC,OAF5B,OAEQrC,EAFR,OASED,EANYuC,YAAStC,GAAM,SAAAgB,GACzB,MAAO,CACLC,IAAKD,EAAEC,GACPE,IAAKH,EAAEG,OAGG,aAAc,IAAM,KATpC,4CADc,uBAAC,WAAD,wBAYdoB,KACC,IAED,yBAAKC,UAAU,OACb,yBAAKvC,GAAG,cAER,uBAAGwC,KAAK,6CACN,kBAAC,IAAD,SCpFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.3e8c35ff.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./App.css\";\n\nimport { FaHeart } from \"react-icons/fa\";\nimport { select } from \"d3-selection\";\nimport { scaleLinear } from \"d3-scale\";\nimport { line } from \"d3-shape\";\nimport { extent } from \"d3-array\";\nimport { csvParse } from \"d3-dsv\";\nimport \"d3-transition\";\n\nfunction plotData(data, id, width, height) {\n  var svg = select(id)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"id\", \"visualization\")\n    .attr(\"xmlns\", \"http://www.w3.org/2000/svg\");\n  console.log(\"here\", id, width, height);\n  var path;\n\n  var x = scaleLinear()\n    .range([0, width])\n    .domain(extent(data, d => d.x1));\n\n  console.log(extent(data), data);\n  var y = scaleLinear()\n    .range([height - 100, 100])\n    .domain(extent(data, d => d.y1));\n\n  var valueline = line()\n    .y(d => y(d.y1))\n    .x(d => x(d.x1));\n\n  svg\n    .append(\"linearGradient\")\n    .attr(\"id\", \"temperature-gradient\")\n    .attr(\"gradientUnits\", \"userSpaceOnUse\")\n    .attr(\"x1\", 0)\n    .attr(\"y1\", y(300))\n    .attr(\"x2\", 0)\n    .attr(\"y2\", y(400))\n    .selectAll(\"stop\")\n    .data([\n      { offset: \"0%\", color: \"red\" },\n      { offset: \"20%\", color: \"orange\" },\n      { offset: \"40%\", color: \"yellow\" },\n      { offset: \"60%\", color: \"green\" },\n      { offset: \"80%\", color: \"blue\" },\n      { offset: \"100%\", color: \"purple\" },\n    ])\n    .enter()\n    .append(\"stop\")\n    .attr(\"offset\", d => d.offset)\n    .attr(\"stop-color\", d => d.color);\n  path = svg\n    .append(\"path\")\n    .datum(data)\n    .style(\"stroke-width\", 8)\n    .style(\"stroke-linecap\", \"butt\")\n    .style(\"stroke-linejoin\", \"round\")\n    .attr(\"class\", \"line\")\n    .attr(\"d\", valueline);\n  console.log(path);\n\n  path\n    .attr(\n      \"stroke-dasharray\",\n      `${path.node().getTotalLength()} ${path.node().getTotalLength()}`\n    )\n    .attr(\"stroke-dashoffset\", path.node().getTotalLength())\n    .transition()\n    .duration(2000)\n    .attr(\"stroke-dashoffset\", 0);\n}\n\nfunction App() {\n  useEffect(() => {\n    async function setup() {\n      const result = await fetch(\"data.csv\");\n      const data = await result.text();\n      const csv = csvParse(data, d => {\n        return {\n          x1: +d.x1,\n          y1: +d.y1,\n        };\n      });\n      plotData(csv, \"#arbitrary\", 1000, 600);\n    }\n    setup();\n  }, []);\n  return (\n    <div className=\"App\">\n      <div id=\"arbitrary\" />\n\n      <a href=\"https://github.com/cmdcolin/pulse_tribute\">\n        <FaHeart />\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}